import type { NextApiRequest, NextApiResponse } from "next";
import { TG_TOKEN, CHAT_ID } from "../../envs";
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" });
  }

  const { name, message } = req.body;

  if (!name || !message || !name.trim() || !message.trim()) {
    return res.status(400).json({ error: "–ò–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  if (!TG_TOKEN || !CHAT_ID) {
    return res
      .status(500)
      .json({ error: "BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env.local" });
  }

  const now = new Date().toLocaleString();
  const text = `üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ñ–æ—Ä–º—ã:\n\nüë§ –ò–º—è: ${name}\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}\nüïí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${now}`;

  try {
    const response = await fetch(
      `https://api.telegram.org/bot${TG_TOKEN}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text,
        }),
      }
    );

    const data = await response.json();

    if (!data.ok) {
      return res.status(500).json({
        error: "–û—à–∏–±–∫–∞ –æ—Ç Telegram API",
        details: data,
      });
    }

    return res.status(200).json({ success: true });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
    return res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
}
